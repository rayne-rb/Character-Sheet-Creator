@using CharacterSheetCreator.Features.AttributeCreation.Models
@using CharacterSheetCreator.Features.AttributeCreation.Services
@using Microsoft.AspNetCore.Http.HttpResults
@using CharacterSheetCreator.Shared.Components
@using CharacterSheetCreator.Shared.Utilities

@inherits CharacterSheetCreator.Shared.Utilities.UtilityComponents

<MudDialog Style="height: 50%">
    <TitleContent>
        <MudText Typo="Typo.h6">@MudDialog.Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Row="true">
            <MudTable T="AttributeDto?" Dense="true" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.Sm"
                      Loading="@Loading" Items="@Attributes" Hover="true" OnRowClick="@(args => EditAttribute(args))">
                <HeaderContent>
                    <MudTh>Attribute Id</MudTh>
                    <MudTh>Attribute Name</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="text-align: right" DataLabel="Attribute Id">@context.AttributeId</MudTd>
                    <MudTd DataLabel="Attribute Name">@context.AttributeName</MudTd>
                    <MudTd Style="text-align: center" DataLabel="Actions">
                        <MudIconButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Icon="@Icons.Material.Filled.DeleteForever" OnClick="_=> DeleteAttribute(context.AttributeId)"/>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudTooltip Visible="false">
                <AddButton OnClick="AddAttribute"/>
            </MudTooltip>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public required IMudDialogInstance MudDialog { get; set; }

    [Parameter] public int GroupId { get; set; }
    
    [Inject] public IDialogService DialogService { get; set; } = default!;
    [Inject] public IAttributesService AttributesService { get; set; } = default!;
    
    public List<AttributeDto> Attributes { get; set; } = new List<AttributeDto>();

    public bool Loading { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        Loading = false;
        await base.OnInitializedAsync();
    }

    public async Task LoadData()
    {
        var attributesResult = await AttributesService.GetAttributes(GroupId);
        if (attributesResult.IsT1)
        {
            await ShowError(attributesResult.AsT1.ErrorMessage);
        }

        Attributes = attributesResult.AsT0;
        StateHasChanged();
    }

    public async Task EditAttribute(TableRowClickEventArgs<AttributeDto?> args)
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };
        var dlg = await DialogService.ShowAsync<EditAttributeDialog>($"Edit Attribute: {args.Item.AttributeName}", options);
    }

    public async Task AddAttribute()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };
        var parameters = new DialogParameters()
        {
            {"GroupId", GroupId}
        };
        var dlg = await DialogService.ShowAsync<AddAttributeDialog>($"Add Attribute", options: options, parameters: parameters);
        await LoadData();
        MudDialog.StateHasChanged();
    }

    public async Task DeleteAttribute(int id)
    {
        await ShowError("Not implemented yet");
    }

    void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}