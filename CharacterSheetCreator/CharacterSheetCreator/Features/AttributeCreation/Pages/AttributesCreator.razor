@page "/AttributesCreator"
@using CharacterSheetCreator.Features.AttributeCreation.Components
@using CharacterSheetCreator.Features.AttributeCreation.Models
@using CharacterSheetCreator.Features.AttributeCreation.Services
@using CharacterSheetCreator.Shared.Components

@inherits CharacterSheetCreator.Shared.Utilities.UtilityComponents

<MudText Typo="Typo.h2">Attribute Groups</MudText>
<MudGrid>
    <MudItem xs="1">
        <MudTooltip Text="Add Group">
            <AddButton OnClick="AddAttributeGroup"/>
        </MudTooltip>
    </MudItem>
    @foreach (var group in AttributeGroups)
    {
        <MudItem xs="3">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="EditGroupAttributes">@group.AttributeGroupName</MudButton>
        </MudItem>
    }
</MudGrid>

@code {

    public List<AttributeGroupsDto> AttributeGroups { get; set; } = [];

    [Inject] public IDialogService DialogService { get; set; } = default!;
    [Inject] public IAttributesService AttributesService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }

    public async Task LoadData()
    {
        var result = await AttributesService.GetAttributeGroups();
        if (result.IsT1)
        {
            await ShowError("Error Loading Attributes");
        }

        AttributeGroups = result.AsT0;
        StateHasChanged();
    }

    public async Task AddAttributeGroup()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };

        var dlg = await DialogService.ShowAsync<AddAttributeGroupDialog>("Add Group", options);
        var dlgResult = dlg.Result.Result;
        if (!dlgResult.Canceled)
        {
            if((bool)dlgResult.Data == false)
            {
                ShowErrorIgnoreReturn("Error Creating Attribute Group");
            }
        }
        ShowSuccess("Attribute Created Successfully");
        await LoadData();
        StateHasChanged();
    } 

    public async Task EditGroupAttributes()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };

        var dlg = await DialogService.ShowAsync<EditAttributesDialog>("Edit Group Attributes", options);
    }

}