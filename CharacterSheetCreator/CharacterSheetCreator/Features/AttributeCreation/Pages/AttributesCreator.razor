@page "/AttributesCreator"
@using CharacterSheetCreator.Features.AttributeCreation.Components
@using CharacterSheetCreator.Features.AttributeCreation.Models
@using CharacterSheetCreator.Features.AttributeCreation.Services
@using CharacterSheetCreator.Shared.Components

@inherits CharacterSheetCreator.Shared.Utilities.UtilityComponents

<MudText Typo="Typo.h2">Attribute Groups</MudText>
<MudGrid>
    <MudItem>
        <MudTooltip Text="Add an Attribute Group">
            <AddButton WithText="true" Text="Add Group" OnClick="AddAttributeGroup"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.HelpOutline" Color="Color.Warning" OnClick="ShowHelp"/>
    </MudItem>
    <MudItem xs="12"></MudItem>
    @foreach (var group in AttributeGroups)
    {
        <MudItem>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="EditGroupAttributes">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h6">@group.AttributeGroupName</MudText>
                    <MudText>Attributes: @group.Attributes.Count</MudText>
                </MudStack>
            </MudButton>
        </MudItem>
    }
</MudGrid>

@code {
    public List<AttributeGroupsDto> AttributeGroups { get; set; } = [];

    [Inject] public IDialogService DialogService { get; set; } = default!;
    [Inject] public IAttributesService AttributesService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }

    public async Task LoadData()
    {
        var result = await AttributesService.GetAttributeGroups();
        if (result.IsT1)
        {
            AttributeGroups = new List<AttributeGroupsDto>();
            await ShowError("Error Loading Attributes");
        }
        else
        {
            AttributeGroups = result.AsT0;
        }

        StateHasChanged();
    }

    public async Task AddAttributeGroup()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };

        var dlg = await DialogService.ShowAsync<AddAttributeGroupDialog>("Add Group", options);
            
        StateHasChanged();
    } 

    public async Task EditGroupAttributes()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };

        var dlg = await DialogService.ShowAsync<EditAttributeGroupDialog>("Edit Group Attributes", options);
        StateHasChanged();
    }

    public async Task ShowHelp()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large
        };
        List<string> helpTexts = ["Attributes are used in Selected Field Types when creating or using custom sheet types", 
            "Attributes are placed into groups for ease of management",
            "An example of an attribute could be \"Is immune to Fire\" in a group called \"Immunities\""];

        var parameters = new DialogParameters()
        {
            {"HelpTexts", helpTexts}
        };

        var dlg = await DialogService.ShowAsync<HelpDialog>("What Are Attributes?", options: options, parameters: parameters);
    }
}